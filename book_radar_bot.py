import os
import re
import logging
import httpx
import asyncio
from datetime import datetime, timedelta
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    URLInputFile
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}
saved_books = {}

# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∂–∞–Ω—Ä—ã
GENRES = [
    "–§—ç–Ω—Ç–µ–∑–∏", "–ù–æ–Ω-—Ñ–∏–∫—à–Ω", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", "–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
    "–î–µ—Ç–µ–∫—Ç–∏–≤", "–†–æ–º–∞–Ω", "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π", "–ë–∏–∑–Ω–µ—Å", "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ",
    "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è", "–ö–ª–∞—Å—Å–∏–∫–∞", "–¢—Ä–∏–ª–ª–µ—Ä", "–£–∂–∞—Å—ã", "–ü–æ—ç–∑–∏—è"
]


# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class BookSearch(StatesGroup):
    waiting_for_title = State()
    waiting_for_author = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def init_user(user_id):
    if user_id not in user_data:
        user_data[user_id] = {
            "genres": [],
            "notifications": True,
            "current_search": {},
            "genre_message_id": None  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –∂–∞–Ω—Ä–æ–≤
        }
    if user_id not in saved_books:
        saved_books[user_id] = []


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="–ù–æ–≤–∏–Ω–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"),
        types.KeyboardButton(text="–ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏")
    )
    builder.row(
        types.KeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏"),
        types.KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    )
    return builder.as_markup(resize_keyboard=True)


def settings_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="–ò–∑–º–µ–Ω–∏—Ç—å –∂–∞–Ω—Ä—ã",
        callback_data="change_genres")
    )
    builder.row(InlineKeyboardButton(
        text="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        callback_data="toggle_notifications")
    )
    return builder.as_markup()


def genres_keyboard(selected_genres):
    builder = InlineKeyboardBuilder()
    for genre in GENRES:
        status = "‚úÖ" if genre in selected_genres else "‚ùå"
        builder.add(InlineKeyboardButton(
            text=f"{status} {genre}",
            callback_data=f"genre_{genre}")
        )
    builder.adjust(2)
    builder.row(InlineKeyboardButton(
        text="–ì–æ—Ç–æ–≤–æ",
        callback_data="genres_done")
    )
    return builder.as_markup()


def save_book_keyboard(book_id):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–Ω–∏–≥—É",
        callback_data=f"save_{book_id}")
    )
    return builder.as_markup()


# –ó–ê–ì–õ–£–®–ö–ê –¥–ª—è API –Ω–æ–≤–∏–Ω–æ–∫ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API)
async def get_new_books_api(genres):
    """–ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –ù–ê –†–ï–ê–õ–¨–ù–´–ô –ü–ê–†–°–ò–ù–ì –ò–õ–ò API –í–ê–®–ï–ì–û –°–ï–†–í–ò–°–ê"""
    logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–æ–≤–∏–Ω–æ–∫. –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API!")

    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    books = []
    for i, genre in enumerate(genres[:3]):
        books.append({
            "id": f"stub_{i}",
            "title": f"–ü—Ä–∏–º–µ—Ä –Ω–æ–≤–∏–Ω–∫–∏ –≤ –∂–∞–Ω—Ä–µ {genre}",
            "author": "–ò–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä",
            "description": f"–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ –≤ –∂–∞–Ω—Ä–µ {genre}. –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
            "cover_url": "",
            "price": f"{399 + i * 50} ‚ÇΩ",
            "source_url": "https://example.com"
        })
    return books


# –ó–ê–ì–õ–£–®–ö–ê –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API)
async def search_books_api(query, author=None):
    """–ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –ù–ê –†–ï–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –í–ê–®–ï–ì–û –°–ï–†–í–ò–°–ê"""
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: {query}, –∞–≤—Ç–æ—Ä: {author}")

    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    books = []
    for i in range(3):
        books.append({
            "id": f"search_{i}",
            "title": f"{query} - –ø—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {i + 1}",
            "author": author or "–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
            "description": f"–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞. –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ '{query}'.",
            "cover_url": "",
            "price": f"{299 + i * 100} ‚ÇΩ",
            "source_url": "https://example.com"
        })
    return books


# –ü–æ–∏—Å–∫ –Ω–æ–≤–∏–Ω–æ–∫ (–∑–∞–≥–ª—É—à–∫–∞)
async def get_new_books(genres):
    return await get_new_books_api(genres)


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–Ω–∏–≥–µ
def format_book_info(book):
    return (
        f"üìö *{book['title']}*\n"
        f"‚úçÔ∏è {book['author']}\n"
        f"üí∞ {book.get('price', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üìù {book['description']}\n"
        f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫]({book['source_url']})"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def cmd_start(message: Message):
    init_user(message.from_user.id)

    welcome_text = (
        "üìñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ö–Ω–∏–∂–Ω—ã–π –†–∞–¥–∞—Ä!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–Ω–∏–∂–Ω—ã—Ö –Ω–æ–≤–∏–Ω–æ–∫ –ø–æ –≤–∞—à–∏–º –ª—é–±–∏–º—ã–º –∂–∞–Ω—Ä–∞–º. "
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∫–∏ "
        "–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –∫–Ω–∏–≥–∏.\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. "
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @alqmnz\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await message.answer(
        welcome_text,
        parse_mode="Markdown",
        reply_markup=main_keyboard()
    )


@dp.message(F.text == "–ù–æ–≤–∏–Ω–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é")
async def new_books_handler(message: Message):
    user_id = message.from_user.id
    init_user(user_id)

    if not user_data[user_id]["genres"]:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!",
            reply_markup=main_keyboard()
        )
        return

    await message.answer("üîç –ò—â—É –Ω–æ–≤–∏–Ω–∫–∏ –ø–æ –≤–∞—à–∏–º –∂–∞–Ω—Ä–∞–º...")

    try:
        books = await get_new_books(user_data[user_id]["genres"])
        if not books:
            await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏–Ω–æ–∫ –ø–æ –≤–∞—à–∏–º –∂–∞–Ω—Ä–∞–º üòî")
            return

        for book in books:
            msg = format_book_info(book)

            if book.get("cover_url"):
                try:
                    await message.answer_photo(
                        URLInputFile(book["cover_url"]),
                        caption=msg,
                        parse_mode="Markdown",
                        reply_markup=save_book_keyboard(book["id"])
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–ª–æ–∂–∫–∏: {e}")
                    await message.answer(
                        msg,
                        parse_mode="Markdown",
                        reply_markup=save_book_keyboard(book["id"])
                    )
            else:
                await message.answer(
                    msg,
                    parse_mode="Markdown",
                    reply_markup=save_book_keyboard(book["id"])
                )

    except Exception as e:
        logger.error(f"New books error: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–∏–Ω–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(F.text == "–ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏")
async def search_book_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    init_user(user_id)

    await state.set_state(BookSearch.waiting_for_title)
    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:",
        reply_markup=types.ReplyKeyboardRemove()
    )


@dp.message(BookSearch.waiting_for_title)
async def process_book_title(message: Message, state: FSMContext):
    user_id = message.from_user.id
    title = message.text.strip()

    if len(title) < 3:
        await message.answer("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    user_data[user_id]["current_search"] = {
        "title": title,
        "books": []
    }

    await state.set_state(BookSearch.waiting_for_author)
    await message.answer(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ, –∏–Ω–∞—á–µ –Ω–∞–∂–º–∏—Ç–µ /skip):",
        reply_markup=types.ForceReply(selective=True)
    )


@dp.message(Command("skip"))
@dp.message(BookSearch.waiting_for_author)
async def process_book_author(message: Message, state: FSMContext):
    user_id = message.from_user.id
    author = message.text.strip() if message.text != "/skip" else None

    search_data = user_data[user_id]["current_search"]
    title = search_data["title"]

    await message.answer(f"üîç –ò—â—É –∫–Ω–∏–≥–∏: {title}" + (f" ({author})" if author else ""))

    try:
        books = await search_books_api(title, author)
        if not books:
            await message.answer("–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòî", reply_markup=main_keyboard())
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        user_data[user_id]["current_search"]["books"] = books

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–∏–≥
        for book in books:
            msg = format_book_info(book)

            if book.get("cover_url"):
                try:
                    await message.answer_photo(
                        URLInputFile(book["cover_url"]),
                        caption=msg,
                        parse_mode="Markdown",
                        reply_markup=save_book_keyboard(book["id"])
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–ª–æ–∂–∫–∏: {e}")
                    await message.answer(
                        msg,
                        parse_mode="Markdown",
                        reply_markup=save_book_keyboard(book["id"])
                    )
            else:
                await message.answer(
                    msg,
                    parse_mode="Markdown",
                    reply_markup=save_book_keyboard(book["id"])
                )

    except Exception as e:
        logger.error(f"Search error: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()
    await message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!", reply_markup=main_keyboard())


@dp.message(F.text == "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏")
async def saved_books_handler(message: Message):
    user_id = message.from_user.id
    init_user(user_id)

    if not saved_books.get(user_id) or not saved_books[user_id]:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥.")
        return

    await message.answer("üìö –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:")

    for i, book in enumerate(saved_books[user_id], 1):
        msg = (
            f"{i}. *{book['title']}*\n"
            f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book['author']}\n"
            f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–Ω–∏–≥—É]({book.get('source_url', 'https://example.com')})"
        )
        await message.answer(msg, parse_mode="Markdown")


@dp.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_handler(message: Message):
    user_id = message.from_user.id
    init_user(user_id)

    status = "‚úÖ –≤–∫–ª—é—á–µ–Ω—ã" if user_data[user_id]["notifications"] else "‚ùå –æ—Ç–∫–ª—é—á–µ–Ω—ã"
    genres = ", ".join(user_data[user_id]["genres"]) if user_data[user_id]["genres"] else "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã"

    text = (
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}\n"
        f"üìö –ñ–∞–Ω—Ä—ã: {genres}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await message.answer(text, parse_mode="Markdown", reply_markup=settings_keyboard())


@dp.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback: CallbackQuery):
    user_id = callback.from_user.id
    init_user(user_id)

    user_data[user_id]["notifications"] = not user_data[user_id]["notifications"]
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if user_data[user_id]["notifications"] else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"

    await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}!")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await callback.message.edit_reply_markup(reply_markup=settings_keyboard())


@dp.callback_query(F.data == "change_genres")
async def change_genres(callback: CallbackQuery):
    user_id = callback.from_user.id
    init_user(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–æ–≤
    sent_message = await callback.message.answer(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∂–∞–Ω—Ä—ã:",
        reply_markup=genres_keyboard(user_data[user_id]["genres"])
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_data[user_id]["genre_message_id"] = sent_message.message_id
    await callback.answer()


@dp.callback_query(F.data.startswith("genre_"))
async def toggle_genre(callback: CallbackQuery):
    user_id = callback.from_user.id
    genre = callback.data.split("_", 1)[1]

    if genre in user_data[user_id]["genres"]:
        user_data[user_id]["genres"].remove(genre)
    else:
        user_data[user_id]["genres"].append(genre)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∂–∞–Ω—Ä–æ–≤
    message_id = user_data[user_id].get("genre_message_id")
    if message_id:
        try:
            await bot.edit_message_reply_markup(
                chat_id=callback.message.chat.id,
                message_id=message_id,
                reply_markup=genres_keyboard(user_data[user_id]["genres"])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await callback.answer()


@dp.callback_query(F.data == "genres_done")
async def genres_done(callback: CallbackQuery):
    user_id = callback.from_user.id
    count = len(user_data[user_id]["genres"])

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∂–∞–Ω—Ä–æ–≤
    message_id = user_data[user_id].get("genre_message_id")
    if message_id:
        try:
            await bot.delete_message(
                chat_id=callback.message.chat.id,
                message_id=message_id
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        user_data[user_id]["genre_message_id"] = None

    await callback.message.answer(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –∂–∞–Ω—Ä–æ–≤: {count}",
        reply_markup=main_keyboard()
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("save_"))
async def save_book(callback: CallbackQuery):
    user_id = callback.from_user.id
    book_id = callback.data.split("_", 1)[1]

    # –ò—â–µ–º –∫–Ω–∏–≥—É –≤ —Ç–µ–∫—É—â–µ–º –ø–æ–∏—Å–∫–µ
    current_books = user_data[user_id]["current_search"].get("books", [])
    book_to_save = next((b for b in current_books if b["id"] == book_id), None)

    # –ò–ª–∏ –≤ –Ω–æ–≤–∏–Ω–∫–∞—Ö
    if not book_to_save:
        books = await get_new_books(user_data[user_id]["genres"])
        book_to_save = next((b for b in books if b["id"] == book_id), None)

    if not book_to_save:
        await callback.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üòî")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–∏–≥—É
    if book_to_save not in saved_books[user_id]:
        saved_books[user_id].append(book_to_save)
        await callback.answer("‚úÖ –ö–Ω–∏–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    else:
        await callback.answer("‚ùå –ö–Ω–∏–≥–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    asyncio.run(main())
